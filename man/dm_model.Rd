% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{dm_model}
\alias{dm_model}
\title{Create a dimensional model}
\usage{
dm_model(flat_table, dimension_columns, dm = NULL, dm_path = NULL)
}
\arguments{
\item{flat_table}{A data frame or an Arrow dataset from which the dimensional
model should be created.}

\item{dimension_columns}{A named list with vectors of column names from
`flat_table` each of which should form a dimension table.}

\item{dm}{A `dm_model` object, i.e. an object returned by `dm_model` or
`dm_model_refresh`, used when adding more dimensions to the model by
passing additional flat tables to the function.}

\item{dm_path}{string path referencing a directory to write the dimensional
model to (directory will be created if it does not exist). If used the model
will be saved as parquet files and the the model returned will be a list of
arrow datasets.}
}
\value{
A \code{dm_model} object containing a list of dimension tables (data
  frames) with primary keys. If \code{dm_path} is used the returned object
  will be a list with Arrow datasets (useful when working with big data).
}
\description{
This function creates a dimensional model from a data frame (referred to as
'flat table').
}
\details{
A complete dimensional model consists of a set of dimension tables that
reference one or more fact tables. However, \code{\link{dm_model}} only
creates dimension tables, not fact tables. It is meant as the first step in
building a complete model. Fact tables are created and added to the model
later using \code{\link{dm_refresh}}.

Moreover, \code{\link{dm_model}} builds dimension tables using only a sample
of the flat table. Even if you pass a very large flat table to the function,
it returns dimension tables with only a few rows. If you work with big data
that do not fit into memory, you can pass them to the function as Arrow
datasets pointing to a folder with Parquet files. If you specify the
\code{dm_path} argument, \code{\link{dm_model}} will save the returned model
itself as Parquet files organized in a sub-folder called 'dimensions'. This
folder can be loaded later as an Arrow dataset using \code{\link{dm_load}}.

\code{\link{dm_model}} can include dimensions from multiple flat tables. This
is done by first initiating the model with a single flat table. This will
return a \code{dm_model} object ready for expansion. To expand the model, run
\code{dm_model} again using a new flat table and the returned \code{dm_model}
object as arguments. If some of the columns in the new flat table intersect
with an existing dimension in the model, and if you want this dimension to be
updated using these columns, simply specify them in the
\code{dimension_columns} argument using the same dimension name as the
existing dimension.
}
\examples{

library(dimmodelR)

# Load demo data
data(campaign_metrics)
data(campaign_metrics)

# Define dimensions as a named list of column names from campaign_metrics
dimensions = list(dim_channel = c("source", "medium", "campaign"))

# Initiate the model
dm <- dm_model(campaign_metrics, dimensions)

# Add dimensions from web_metrics
dimensions = list(
  dim_channel = c("source", "medium", "campaign"),
  dim_market = c("view_name", "country")
  )

# Expand the model using the model itself (`dm`) as an argument
dm <- dm_model(web_metrics, dimensions, dm)

\dontrun{

# When working with big data, use the arrow package

library(arrow)

# Let's imagine campaign_metrics is too big to fit into memory
flattable <- tempfile()
arrow::write_dataset( campaign_metrics, flattable)

# Set the path of the dimensional model you are going to create
model_path <- file.path(getwd(), "my-model")

# Open campaign_metrics as an Arrow dataset
# (imagining it is too big for memory)
cam <- arrow::open_dataset(flattable)

# Define dimension columns
dimension_columns <- list(dim_channel = c("source", "medium", "campaign"))

# Initiate the mode without loading into memory (using the dm_path argument)
dm <- dm_model(
  flat_table = cam,
  dimension_columns = dimension_columns,
  dm = NULL,
  dm_path = model_path
  )

# Let's add dimensions from web_metrics
# Again we imagine it is big
flattable <- tempfile()
arrow::write_dataset(web_metrics, flattable)

web <- arrow::open_dataset(flattable)

dimension_columns = list(
  dim_channel = c("source", "medium", "campaign"),
  dim_market = c("view_name", "country")
  )

dm <- dm_model(
  flat_table = web,
  dimension_columns = dimension_columns,
  dm = dm,
  dm_path = dm_path = model_path
  )

# Check the result
list.files(model_path, recursive = TRUE)

}
}
\seealso{
\code{\link{dm_refresh}}
}
